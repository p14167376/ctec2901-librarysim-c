//===========================================================================
// FILE: info.txt
//===========================================================================
// CTEC2901 Assignment 2
// Barnaby Stewart (P14167376)
//---------------------------------------------------------------------------


// Command line to build the program:
//---------------------------------------------------------------------------
make all


// Technical Analysis
//---------------------------------------------------------------------------
The files for the simulation are as follows:

- sim.h/c, main() function, handles cmd line and creating threads.
- library.h/c, manages the books in response to messages
- librarian.h/c, adds books to the library and makes BOOKS/LOANS requests
- borrower.h/c, randomly requests/returns books from/to the library
- msg_queue.h/c, functions for handling the thread safe passing of messages
- shutdown.h/c, global shutdown variable and shutdown friendly delays
- mvar.h/c, mutable variable (used to acknowledge completion of message)
- avl_any.h/c, modified avl tree to allow mapping and finding of elements
- set_ints.h/c, wrapper functions for handling sets of ints
- smalloc.h, Macro to automatically check for failure when allocating memory
- terminal.h/c, functions for ANSI terminal commands (eg setting text colour)
- trace.h, Macro for trace message diagnostics (used during development)
- makefile, does what it says on the tin!

The threading process itself actually worked very much as intended with few
problems. Or rather, the problems that I had were down to simple coding
errors rather than any misunderstanding of the threading principles. Possibly
the biggest hazard was when performing a shutdown, ensuring that any threads
that are waiting are nudged out of the waiting condition and allowed to exit
properly. Namely the library waiting for msg_waiting (empty queue) or clients
waiting for an ack.

Another impediment in developing this program was certain limitations in the
standard course data structures. Most notably these provide little or poor
functionality for enumerating or mapping their content.
For the avl_any struct I have actually used a modified copy of the standard
code. For the sets I have enumerated by creating a duplicate set and then
using 'set_choose_item()' to map members until the set is empty. I also used
helper/wrapper functions for handling sets of integers. This handled emptying
of the set when tidying up and reduced type casting throughout the code.

Blocked/Buffered Keyboard Input:
One difficulty that I have encountered in this project as well as in other
coursework is the buffered/blocked nature of keyboard input. This makes it
tricky if you want to check for input, but carry on processing anyway.
While there are ways to change the terminal to unbuffered mode, it seemed
that the best solution in this instance was to create a new thread for the
user input. If the user enters a quit command then this thread will exit
normally anyway. If the program times out while still waiting for user input
in this thread, then the main thread can cancel the user input thread.

I created a number of ancillary files with helper functions and variables.
- shutdown.h/c, global shutdown variable and functions for delay which
  still allowed shutdown.
- 

// Summary
//---------------------------------------------------------------------------

The program fulfills all of the basic requirements given:
  - Creates a single thread for the library
  - Creates a single thread for the librarian
  - Creates multiple threads for borrowers
  - Librarian and borrowers interact with the library through thread safe
    passing of messages.
  - Avoids deadlocks and other concurrency pitfalls
  - Passes data using appropriate data structures
  - Accepts a command line argument for setting the number of borrowers

 Also allows the following:
  - Accepts a cmd line argument for specifying a time limit.
  - Allows user termination of the program by typing 'q' and return.
  - Also command line options for the following:
  -  - displaying command line usage
  -  - set range for book id's, number of books
  -  - borrower/librarian delay and request sizes

